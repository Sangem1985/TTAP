//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace TTAP.TSIPASSSERVICE {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DepartmentApprovalSystemSoap", Namespace="http://tempuri.org/")]
    public partial class DepartmentApprovalSystem : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UpdatelegalStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTSIPASSdataonUIDnumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTSIPASSTrackeronUIDnumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPCBNICPortalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentApprovalProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentApprovalProcessAndCertificateUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentApprovalProcessAndCertificateUploadContractLabourOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentApprovalProcessCFOOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentApprovalProcessAndCertificateUploadCFOOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentApprovalProcessAndCertificateUploadContractLabourCFOOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentErectorCertificateUploadCFOOperationCompleted;
        
        private System.Threading.SendOrPostCallback HMDAAdditionalPaymentDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentApprovalProcessAndCertificateUploadContractLabourLicenseOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPCBNICPortalDataCFOOperationCompleted;
        
        private System.Threading.SendOrPostCallback DigitalSiteplanUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRegistrationNumberAndCerificateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DPMSPlanUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertClarificationResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertClarificationResponseCFOOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPCBNICPortalDataRENOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentApprovalProcessRENOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentApprovalProcessAndCertificateUploadRENOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertClarificationResponseRenOperationCompleted;
        
        private System.Threading.SendOrPostCallback BoilerInspectionReportStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentPlotAllotmentProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentApprovalProcessCFOLabourOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCFEEnterprenuerDetailsNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetdataCFEApprovaldocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback BoilerInspectionStatusCFEOperationCompleted;
        
        private System.Threading.SendOrPostCallback BoilerInspectionStatusRENOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertEXCISEPortalDataCFOOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentApprovalProcessTourismEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentApprovalProcessAndCertificateUploadTourismEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentPlotAllotmentProcessSubdivisionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRenewalQuestionnaireidpcbOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPCBNICPortalDataBMWOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentApprovalProcessBMWOperationCompleted;
        
        private System.Threading.SendOrPostCallback DepartmentApprovalProcessAndCertificateUploadBMWOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertClarificationResponseBMWOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRedirectionstatusLegalVerficationOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DepartmentApprovalSystem() {
            this.Url = global::TTAP.Properties.Settings.Default.TTAP_TSIPASSSERVICE_DepartmentApprovalSystem;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UpdatelegalStatusCompletedEventHandler UpdatelegalStatusCompleted;
        
        /// <remarks/>
        public event GetTSIPASSdataonUIDnumberCompletedEventHandler GetTSIPASSdataonUIDnumberCompleted;
        
        /// <remarks/>
        public event GetTSIPASSTrackeronUIDnumberCompletedEventHandler GetTSIPASSTrackeronUIDnumberCompleted;
        
        /// <remarks/>
        public event InsertPCBNICPortalDataCompletedEventHandler InsertPCBNICPortalDataCompleted;
        
        /// <remarks/>
        public event DepartmentApprovalProcessCompletedEventHandler DepartmentApprovalProcessCompleted;
        
        /// <remarks/>
        public event DepartmentApprovalProcessAndCertificateUploadCompletedEventHandler DepartmentApprovalProcessAndCertificateUploadCompleted;
        
        /// <remarks/>
        public event DepartmentApprovalProcessAndCertificateUploadContractLabourCompletedEventHandler DepartmentApprovalProcessAndCertificateUploadContractLabourCompleted;
        
        /// <remarks/>
        public event DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCompletedEventHandler DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCompleted;
        
        /// <remarks/>
        public event DepartmentApprovalProcessCFOCompletedEventHandler DepartmentApprovalProcessCFOCompleted;
        
        /// <remarks/>
        public event DepartmentApprovalProcessAndCertificateUploadCFOCompletedEventHandler DepartmentApprovalProcessAndCertificateUploadCFOCompleted;
        
        /// <remarks/>
        public event DepartmentApprovalProcessAndCertificateUploadContractLabourCFOCompletedEventHandler DepartmentApprovalProcessAndCertificateUploadContractLabourCFOCompleted;
        
        /// <remarks/>
        public event DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOCompletedEventHandler DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOCompleted;
        
        /// <remarks/>
        public event DepartmentErectorCertificateUploadCFOCompletedEventHandler DepartmentErectorCertificateUploadCFOCompleted;
        
        /// <remarks/>
        public event HMDAAdditionalPaymentDetailsCompletedEventHandler HMDAAdditionalPaymentDetailsCompleted;
        
        /// <remarks/>
        public event DepartmentApprovalProcessAndCertificateUploadContractLabourLicenseCompletedEventHandler DepartmentApprovalProcessAndCertificateUploadContractLabourLicenseCompleted;
        
        /// <remarks/>
        public event InsertPCBNICPortalDataCFOCompletedEventHandler InsertPCBNICPortalDataCFOCompleted;
        
        /// <remarks/>
        public event DigitalSiteplanUploadCompletedEventHandler DigitalSiteplanUploadCompleted;
        
        /// <remarks/>
        public event GetRegistrationNumberAndCerificateCompletedEventHandler GetRegistrationNumberAndCerificateCompleted;
        
        /// <remarks/>
        public event DPMSPlanUploadCompletedEventHandler DPMSPlanUploadCompleted;
        
        /// <remarks/>
        public event InsertClarificationResponseCompletedEventHandler InsertClarificationResponseCompleted;
        
        /// <remarks/>
        public event InsertClarificationResponseCFOCompletedEventHandler InsertClarificationResponseCFOCompleted;
        
        /// <remarks/>
        public event InsertPCBNICPortalDataRENCompletedEventHandler InsertPCBNICPortalDataRENCompleted;
        
        /// <remarks/>
        public event DepartmentApprovalProcessRENCompletedEventHandler DepartmentApprovalProcessRENCompleted;
        
        /// <remarks/>
        public event DepartmentApprovalProcessAndCertificateUploadRENCompletedEventHandler DepartmentApprovalProcessAndCertificateUploadRENCompleted;
        
        /// <remarks/>
        public event InsertClarificationResponseRenCompletedEventHandler InsertClarificationResponseRenCompleted;
        
        /// <remarks/>
        public event BoilerInspectionReportStatusCompletedEventHandler BoilerInspectionReportStatusCompleted;
        
        /// <remarks/>
        public event DepartmentPlotAllotmentProcessCompletedEventHandler DepartmentPlotAllotmentProcessCompleted;
        
        /// <remarks/>
        public event DepartmentApprovalProcessCFOLabourCompletedEventHandler DepartmentApprovalProcessCFOLabourCompleted;
        
        /// <remarks/>
        public event GetCFEEnterprenuerDetailsNewCompletedEventHandler GetCFEEnterprenuerDetailsNewCompleted;
        
        /// <remarks/>
        public event GetdataCFEApprovaldocumentCompletedEventHandler GetdataCFEApprovaldocumentCompleted;
        
        /// <remarks/>
        public event BoilerInspectionStatusCFECompletedEventHandler BoilerInspectionStatusCFECompleted;
        
        /// <remarks/>
        public event BoilerInspectionStatusRENCompletedEventHandler BoilerInspectionStatusRENCompleted;
        
        /// <remarks/>
        public event InsertEXCISEPortalDataCFOCompletedEventHandler InsertEXCISEPortalDataCFOCompleted;
        
        /// <remarks/>
        public event DepartmentApprovalProcessTourismEventCompletedEventHandler DepartmentApprovalProcessTourismEventCompleted;
        
        /// <remarks/>
        public event DepartmentApprovalProcessAndCertificateUploadTourismEventCompletedEventHandler DepartmentApprovalProcessAndCertificateUploadTourismEventCompleted;
        
        /// <remarks/>
        public event DepartmentPlotAllotmentProcessSubdivisionCompletedEventHandler DepartmentPlotAllotmentProcessSubdivisionCompleted;
        
        /// <remarks/>
        public event GetRenewalQuestionnaireidpcbCompletedEventHandler GetRenewalQuestionnaireidpcbCompleted;
        
        /// <remarks/>
        public event InsertPCBNICPortalDataBMWCompletedEventHandler InsertPCBNICPortalDataBMWCompleted;
        
        /// <remarks/>
        public event DepartmentApprovalProcessBMWCompletedEventHandler DepartmentApprovalProcessBMWCompleted;
        
        /// <remarks/>
        public event DepartmentApprovalProcessAndCertificateUploadBMWCompletedEventHandler DepartmentApprovalProcessAndCertificateUploadBMWCompleted;
        
        /// <remarks/>
        public event InsertClarificationResponseBMWCompletedEventHandler InsertClarificationResponseBMWCompleted;
        
        /// <remarks/>
        public event UpdateRedirectionstatusLegalVerficationCompletedEventHandler UpdateRedirectionstatusLegalVerficationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatelegalStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdatelegalStatus(string LgvID, string AdditionalPayment, string rejectedremarks, string approvalRejectionflag, string stageid, string ApprovalLink) {
            object[] results = this.Invoke("UpdatelegalStatus", new object[] {
                        LgvID,
                        AdditionalPayment,
                        rejectedremarks,
                        approvalRejectionflag,
                        stageid,
                        ApprovalLink});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatelegalStatusAsync(string LgvID, string AdditionalPayment, string rejectedremarks, string approvalRejectionflag, string stageid, string ApprovalLink) {
            this.UpdatelegalStatusAsync(LgvID, AdditionalPayment, rejectedremarks, approvalRejectionflag, stageid, ApprovalLink, null);
        }
        
        /// <remarks/>
        public void UpdatelegalStatusAsync(string LgvID, string AdditionalPayment, string rejectedremarks, string approvalRejectionflag, string stageid, string ApprovalLink, object userState) {
            if ((this.UpdatelegalStatusOperationCompleted == null)) {
                this.UpdatelegalStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatelegalStatusOperationCompleted);
            }
            this.InvokeAsync("UpdatelegalStatus", new object[] {
                        LgvID,
                        AdditionalPayment,
                        rejectedremarks,
                        approvalRejectionflag,
                        stageid,
                        ApprovalLink}, this.UpdatelegalStatusOperationCompleted, userState);
        }
        
        private void OnUpdatelegalStatusOperationCompleted(object arg) {
            if ((this.UpdatelegalStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatelegalStatusCompleted(this, new UpdatelegalStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTSIPASSdataonUIDnumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTSIPASSdataonUIDnumber(string uidno, string Createdby) {
            object[] results = this.Invoke("GetTSIPASSdataonUIDnumber", new object[] {
                        uidno,
                        Createdby});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTSIPASSdataonUIDnumberAsync(string uidno, string Createdby) {
            this.GetTSIPASSdataonUIDnumberAsync(uidno, Createdby, null);
        }
        
        /// <remarks/>
        public void GetTSIPASSdataonUIDnumberAsync(string uidno, string Createdby, object userState) {
            if ((this.GetTSIPASSdataonUIDnumberOperationCompleted == null)) {
                this.GetTSIPASSdataonUIDnumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTSIPASSdataonUIDnumberOperationCompleted);
            }
            this.InvokeAsync("GetTSIPASSdataonUIDnumber", new object[] {
                        uidno,
                        Createdby}, this.GetTSIPASSdataonUIDnumberOperationCompleted, userState);
        }
        
        private void OnGetTSIPASSdataonUIDnumberOperationCompleted(object arg) {
            if ((this.GetTSIPASSdataonUIDnumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTSIPASSdataonUIDnumberCompleted(this, new GetTSIPASSdataonUIDnumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTSIPASSTrackeronUIDnumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTSIPASSTrackeronUIDnumber(string uidno, string Approvalid) {
            object[] results = this.Invoke("GetTSIPASSTrackeronUIDnumber", new object[] {
                        uidno,
                        Approvalid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTSIPASSTrackeronUIDnumberAsync(string uidno, string Approvalid) {
            this.GetTSIPASSTrackeronUIDnumberAsync(uidno, Approvalid, null);
        }
        
        /// <remarks/>
        public void GetTSIPASSTrackeronUIDnumberAsync(string uidno, string Approvalid, object userState) {
            if ((this.GetTSIPASSTrackeronUIDnumberOperationCompleted == null)) {
                this.GetTSIPASSTrackeronUIDnumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTSIPASSTrackeronUIDnumberOperationCompleted);
            }
            this.InvokeAsync("GetTSIPASSTrackeronUIDnumber", new object[] {
                        uidno,
                        Approvalid}, this.GetTSIPASSTrackeronUIDnumberOperationCompleted, userState);
        }
        
        private void OnGetTSIPASSTrackeronUIDnumberOperationCompleted(object arg) {
            if ((this.GetTSIPASSTrackeronUIDnumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTSIPASSTrackeronUIDnumberCompleted(this, new GetTSIPASSTrackeronUIDnumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPCBNICPortalData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertPCBNICPortalData(string intCFEEnterpid, string intQuessionaireid, string ApplicationSubmitted, string ApplicationSubmissionDate, string PaymentStatus, string TransactionNo, string PaymentDate, string BankName, string TotalAmount, string Downloadlink, string NICApplicationno, string AppealFlag) {
            object[] results = this.Invoke("InsertPCBNICPortalData", new object[] {
                        intCFEEnterpid,
                        intQuessionaireid,
                        ApplicationSubmitted,
                        ApplicationSubmissionDate,
                        PaymentStatus,
                        TransactionNo,
                        PaymentDate,
                        BankName,
                        TotalAmount,
                        Downloadlink,
                        NICApplicationno,
                        AppealFlag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertPCBNICPortalDataAsync(string intCFEEnterpid, string intQuessionaireid, string ApplicationSubmitted, string ApplicationSubmissionDate, string PaymentStatus, string TransactionNo, string PaymentDate, string BankName, string TotalAmount, string Downloadlink, string NICApplicationno, string AppealFlag) {
            this.InsertPCBNICPortalDataAsync(intCFEEnterpid, intQuessionaireid, ApplicationSubmitted, ApplicationSubmissionDate, PaymentStatus, TransactionNo, PaymentDate, BankName, TotalAmount, Downloadlink, NICApplicationno, AppealFlag, null);
        }
        
        /// <remarks/>
        public void InsertPCBNICPortalDataAsync(string intCFEEnterpid, string intQuessionaireid, string ApplicationSubmitted, string ApplicationSubmissionDate, string PaymentStatus, string TransactionNo, string PaymentDate, string BankName, string TotalAmount, string Downloadlink, string NICApplicationno, string AppealFlag, object userState) {
            if ((this.InsertPCBNICPortalDataOperationCompleted == null)) {
                this.InsertPCBNICPortalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPCBNICPortalDataOperationCompleted);
            }
            this.InvokeAsync("InsertPCBNICPortalData", new object[] {
                        intCFEEnterpid,
                        intQuessionaireid,
                        ApplicationSubmitted,
                        ApplicationSubmissionDate,
                        PaymentStatus,
                        TransactionNo,
                        PaymentDate,
                        BankName,
                        TotalAmount,
                        Downloadlink,
                        NICApplicationno,
                        AppealFlag}, this.InsertPCBNICPortalDataOperationCompleted, userState);
        }
        
        private void OnInsertPCBNICPortalDataOperationCompleted(object arg) {
            if ((this.InsertPCBNICPortalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPCBNICPortalDataCompleted(this, new InsertPCBNICPortalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentApprovalProcess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentApprovalProcess(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip) {
            object[] results = this.Invoke("DepartmentApprovalProcess", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        UID,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Querytype,
                        Query_Raised_Text,
                        AdditionalAmount,
                        additionaldocs,
                        Trans_Date,
                        Created_by,
                        Sysip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAsync(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip) {
            this.DepartmentApprovalProcessAsync(intQuessionaireid, intCFEEnterpid, UID, intDeptid, intApprovalid, intStageid, Querytype, Query_Raised_Text, AdditionalAmount, additionaldocs, Trans_Date, Created_by, Sysip, null);
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAsync(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip, object userState) {
            if ((this.DepartmentApprovalProcessOperationCompleted == null)) {
                this.DepartmentApprovalProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentApprovalProcessOperationCompleted);
            }
            this.InvokeAsync("DepartmentApprovalProcess", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        UID,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Querytype,
                        Query_Raised_Text,
                        AdditionalAmount,
                        additionaldocs,
                        Trans_Date,
                        Created_by,
                        Sysip}, this.DepartmentApprovalProcessOperationCompleted, userState);
        }
        
        private void OnDepartmentApprovalProcessOperationCompleted(object arg) {
            if ((this.DepartmentApprovalProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentApprovalProcessCompleted(this, new DepartmentApprovalProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentApprovalProcessAndCertificateUpload", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentApprovalProcessAndCertificateUpload(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            object[] results = this.Invoke("DepartmentApprovalProcessAndCertificateUpload", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            this.DepartmentApprovalProcessAndCertificateUploadAsync(intQuessionaireid, EnterprenuerId, intApprovalid, intDeptid, intStageid, FileName, FilePath, Remarks, FileRefNo, Modified_by, null);
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by, object userState) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadOperationCompleted == null)) {
                this.DepartmentApprovalProcessAndCertificateUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentApprovalProcessAndCertificateUploadOperationCompleted);
            }
            this.InvokeAsync("DepartmentApprovalProcessAndCertificateUpload", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by}, this.DepartmentApprovalProcessAndCertificateUploadOperationCompleted, userState);
        }
        
        private void OnDepartmentApprovalProcessAndCertificateUploadOperationCompleted(object arg) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentApprovalProcessAndCertificateUploadCompleted(this, new DepartmentApprovalProcessAndCertificateUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentApprovalProcessAndCertificateUploadContractLabour", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentApprovalProcessAndCertificateUploadContractLabour(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            object[] results = this.Invoke("DepartmentApprovalProcessAndCertificateUploadContractLabour", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadContractLabourAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            this.DepartmentApprovalProcessAndCertificateUploadContractLabourAsync(intQuessionaireid, EnterprenuerId, intApprovalid, intDeptid, intStageid, FileName, FilePath, Remarks, FileRefNo, Modified_by, null);
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadContractLabourAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by, object userState) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadContractLabourOperationCompleted == null)) {
                this.DepartmentApprovalProcessAndCertificateUploadContractLabourOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentApprovalProcessAndCertificateUploadContractLabourOperationCompleted);
            }
            this.InvokeAsync("DepartmentApprovalProcessAndCertificateUploadContractLabour", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by}, this.DepartmentApprovalProcessAndCertificateUploadContractLabourOperationCompleted, userState);
        }
        
        private void OnDepartmentApprovalProcessAndCertificateUploadContractLabourOperationCompleted(object arg) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadContractLabourCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentApprovalProcessAndCertificateUploadContractLabourCompleted(this, new DepartmentApprovalProcessAndCertificateUploadContractLabourCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentApprovalProcessAndCertificateUploadPrincipalEmployer" +
            "", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentApprovalProcessAndCertificateUploadPrincipalEmployer(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            object[] results = this.Invoke("DepartmentApprovalProcessAndCertificateUploadPrincipalEmployer", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            this.DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerAsync(intQuessionaireid, EnterprenuerId, intApprovalid, intDeptid, intStageid, FileName, FilePath, Remarks, FileRefNo, Modified_by, null);
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by, object userState) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerOperationCompleted == null)) {
                this.DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentApprovalProcessAndCertificateUploadPrincipalEmployerOperationCompleted);
            }
            this.InvokeAsync("DepartmentApprovalProcessAndCertificateUploadPrincipalEmployer", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by}, this.DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerOperationCompleted, userState);
        }
        
        private void OnDepartmentApprovalProcessAndCertificateUploadPrincipalEmployerOperationCompleted(object arg) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCompleted(this, new DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentApprovalProcessCFO", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentApprovalProcessCFO(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip) {
            object[] results = this.Invoke("DepartmentApprovalProcessCFO", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        UID,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Querytype,
                        Query_Raised_Text,
                        AdditionalAmount,
                        additionaldocs,
                        Trans_Date,
                        Created_by,
                        Sysip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessCFOAsync(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip) {
            this.DepartmentApprovalProcessCFOAsync(intQuessionaireid, intCFEEnterpid, UID, intDeptid, intApprovalid, intStageid, Querytype, Query_Raised_Text, AdditionalAmount, additionaldocs, Trans_Date, Created_by, Sysip, null);
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessCFOAsync(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip, object userState) {
            if ((this.DepartmentApprovalProcessCFOOperationCompleted == null)) {
                this.DepartmentApprovalProcessCFOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentApprovalProcessCFOOperationCompleted);
            }
            this.InvokeAsync("DepartmentApprovalProcessCFO", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        UID,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Querytype,
                        Query_Raised_Text,
                        AdditionalAmount,
                        additionaldocs,
                        Trans_Date,
                        Created_by,
                        Sysip}, this.DepartmentApprovalProcessCFOOperationCompleted, userState);
        }
        
        private void OnDepartmentApprovalProcessCFOOperationCompleted(object arg) {
            if ((this.DepartmentApprovalProcessCFOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentApprovalProcessCFOCompleted(this, new DepartmentApprovalProcessCFOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentApprovalProcessAndCertificateUploadCFO", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentApprovalProcessAndCertificateUploadCFO(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            object[] results = this.Invoke("DepartmentApprovalProcessAndCertificateUploadCFO", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadCFOAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            this.DepartmentApprovalProcessAndCertificateUploadCFOAsync(intQuessionaireid, EnterprenuerId, intApprovalid, intDeptid, intStageid, FileName, FilePath, Remarks, FileRefNo, Modified_by, null);
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadCFOAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by, object userState) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadCFOOperationCompleted == null)) {
                this.DepartmentApprovalProcessAndCertificateUploadCFOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentApprovalProcessAndCertificateUploadCFOOperationCompleted);
            }
            this.InvokeAsync("DepartmentApprovalProcessAndCertificateUploadCFO", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by}, this.DepartmentApprovalProcessAndCertificateUploadCFOOperationCompleted, userState);
        }
        
        private void OnDepartmentApprovalProcessAndCertificateUploadCFOOperationCompleted(object arg) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadCFOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentApprovalProcessAndCertificateUploadCFOCompleted(this, new DepartmentApprovalProcessAndCertificateUploadCFOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentApprovalProcessAndCertificateUploadContractLabourCFO" +
            "", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentApprovalProcessAndCertificateUploadContractLabourCFO(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            object[] results = this.Invoke("DepartmentApprovalProcessAndCertificateUploadContractLabourCFO", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadContractLabourCFOAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            this.DepartmentApprovalProcessAndCertificateUploadContractLabourCFOAsync(intQuessionaireid, EnterprenuerId, intApprovalid, intDeptid, intStageid, FileName, FilePath, Remarks, FileRefNo, Modified_by, null);
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadContractLabourCFOAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by, object userState) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadContractLabourCFOOperationCompleted == null)) {
                this.DepartmentApprovalProcessAndCertificateUploadContractLabourCFOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentApprovalProcessAndCertificateUploadContractLabourCFOOperationCompleted);
            }
            this.InvokeAsync("DepartmentApprovalProcessAndCertificateUploadContractLabourCFO", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by}, this.DepartmentApprovalProcessAndCertificateUploadContractLabourCFOOperationCompleted, userState);
        }
        
        private void OnDepartmentApprovalProcessAndCertificateUploadContractLabourCFOOperationCompleted(object arg) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadContractLabourCFOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentApprovalProcessAndCertificateUploadContractLabourCFOCompleted(this, new DepartmentApprovalProcessAndCertificateUploadContractLabourCFOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentApprovalProcessAndCertificateUploadPrincipalEmployer" +
            "CFO", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFO(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            object[] results = this.Invoke("DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFO", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            this.DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOAsync(intQuessionaireid, EnterprenuerId, intApprovalid, intDeptid, intStageid, FileName, FilePath, Remarks, FileRefNo, Modified_by, null);
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by, object userState) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOOperationCompleted == null)) {
                this.DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOOperationCompleted);
            }
            this.InvokeAsync("DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFO", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by}, this.DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOOperationCompleted, userState);
        }
        
        private void OnDepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOOperationCompleted(object arg) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOCompleted(this, new DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentErectorCertificateUploadCFO", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentErectorCertificateUploadCFO(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            object[] results = this.Invoke("DepartmentErectorCertificateUploadCFO", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentErectorCertificateUploadCFOAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            this.DepartmentErectorCertificateUploadCFOAsync(intQuessionaireid, EnterprenuerId, intApprovalid, intDeptid, intStageid, FileName, FilePath, Remarks, FileRefNo, Modified_by, null);
        }
        
        /// <remarks/>
        public void DepartmentErectorCertificateUploadCFOAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by, object userState) {
            if ((this.DepartmentErectorCertificateUploadCFOOperationCompleted == null)) {
                this.DepartmentErectorCertificateUploadCFOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentErectorCertificateUploadCFOOperationCompleted);
            }
            this.InvokeAsync("DepartmentErectorCertificateUploadCFO", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by}, this.DepartmentErectorCertificateUploadCFOOperationCompleted, userState);
        }
        
        private void OnDepartmentErectorCertificateUploadCFOOperationCompleted(object arg) {
            if ((this.DepartmentErectorCertificateUploadCFOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentErectorCertificateUploadCFOCompleted(this, new DepartmentErectorCertificateUploadCFOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HMDAAdditionalPaymentDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HMDAAdditionalPaymentDetails(string ChallanId, string Amount, string UidNo, string IntDeptid, string IntApprovalId) {
            object[] results = this.Invoke("HMDAAdditionalPaymentDetails", new object[] {
                        ChallanId,
                        Amount,
                        UidNo,
                        IntDeptid,
                        IntApprovalId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HMDAAdditionalPaymentDetailsAsync(string ChallanId, string Amount, string UidNo, string IntDeptid, string IntApprovalId) {
            this.HMDAAdditionalPaymentDetailsAsync(ChallanId, Amount, UidNo, IntDeptid, IntApprovalId, null);
        }
        
        /// <remarks/>
        public void HMDAAdditionalPaymentDetailsAsync(string ChallanId, string Amount, string UidNo, string IntDeptid, string IntApprovalId, object userState) {
            if ((this.HMDAAdditionalPaymentDetailsOperationCompleted == null)) {
                this.HMDAAdditionalPaymentDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHMDAAdditionalPaymentDetailsOperationCompleted);
            }
            this.InvokeAsync("HMDAAdditionalPaymentDetails", new object[] {
                        ChallanId,
                        Amount,
                        UidNo,
                        IntDeptid,
                        IntApprovalId}, this.HMDAAdditionalPaymentDetailsOperationCompleted, userState);
        }
        
        private void OnHMDAAdditionalPaymentDetailsOperationCompleted(object arg) {
            if ((this.HMDAAdditionalPaymentDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HMDAAdditionalPaymentDetailsCompleted(this, new HMDAAdditionalPaymentDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentApprovalProcessAndCertificateUploadContractLabourLic" +
            "ense", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentApprovalProcessAndCertificateUploadContractLabourLicense(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            object[] results = this.Invoke("DepartmentApprovalProcessAndCertificateUploadContractLabourLicense", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadContractLabourLicenseAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            this.DepartmentApprovalProcessAndCertificateUploadContractLabourLicenseAsync(intQuessionaireid, EnterprenuerId, intApprovalid, intDeptid, intStageid, FileName, FilePath, Remarks, FileRefNo, Modified_by, null);
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadContractLabourLicenseAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by, object userState) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadContractLabourLicenseOperationCompleted == null)) {
                this.DepartmentApprovalProcessAndCertificateUploadContractLabourLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentApprovalProcessAndCertificateUploadContractLabourLicenseOperationCompleted);
            }
            this.InvokeAsync("DepartmentApprovalProcessAndCertificateUploadContractLabourLicense", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by}, this.DepartmentApprovalProcessAndCertificateUploadContractLabourLicenseOperationCompleted, userState);
        }
        
        private void OnDepartmentApprovalProcessAndCertificateUploadContractLabourLicenseOperationCompleted(object arg) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadContractLabourLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentApprovalProcessAndCertificateUploadContractLabourLicenseCompleted(this, new DepartmentApprovalProcessAndCertificateUploadContractLabourLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPCBNICPortalDataCFO", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertPCBNICPortalDataCFO(string intCFEEnterpid, string intQuessionaireid, string ApplicationSubmitted, string ApplicationSubmissionDate, string PaymentStatus, string TransactionNo, string PaymentDate, string BankName, string TotalAmount, string Downloadlink, string NICApplicationno, string AppealFlag) {
            object[] results = this.Invoke("InsertPCBNICPortalDataCFO", new object[] {
                        intCFEEnterpid,
                        intQuessionaireid,
                        ApplicationSubmitted,
                        ApplicationSubmissionDate,
                        PaymentStatus,
                        TransactionNo,
                        PaymentDate,
                        BankName,
                        TotalAmount,
                        Downloadlink,
                        NICApplicationno,
                        AppealFlag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertPCBNICPortalDataCFOAsync(string intCFEEnterpid, string intQuessionaireid, string ApplicationSubmitted, string ApplicationSubmissionDate, string PaymentStatus, string TransactionNo, string PaymentDate, string BankName, string TotalAmount, string Downloadlink, string NICApplicationno, string AppealFlag) {
            this.InsertPCBNICPortalDataCFOAsync(intCFEEnterpid, intQuessionaireid, ApplicationSubmitted, ApplicationSubmissionDate, PaymentStatus, TransactionNo, PaymentDate, BankName, TotalAmount, Downloadlink, NICApplicationno, AppealFlag, null);
        }
        
        /// <remarks/>
        public void InsertPCBNICPortalDataCFOAsync(string intCFEEnterpid, string intQuessionaireid, string ApplicationSubmitted, string ApplicationSubmissionDate, string PaymentStatus, string TransactionNo, string PaymentDate, string BankName, string TotalAmount, string Downloadlink, string NICApplicationno, string AppealFlag, object userState) {
            if ((this.InsertPCBNICPortalDataCFOOperationCompleted == null)) {
                this.InsertPCBNICPortalDataCFOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPCBNICPortalDataCFOOperationCompleted);
            }
            this.InvokeAsync("InsertPCBNICPortalDataCFO", new object[] {
                        intCFEEnterpid,
                        intQuessionaireid,
                        ApplicationSubmitted,
                        ApplicationSubmissionDate,
                        PaymentStatus,
                        TransactionNo,
                        PaymentDate,
                        BankName,
                        TotalAmount,
                        Downloadlink,
                        NICApplicationno,
                        AppealFlag}, this.InsertPCBNICPortalDataCFOOperationCompleted, userState);
        }
        
        private void OnInsertPCBNICPortalDataCFOOperationCompleted(object arg) {
            if ((this.InsertPCBNICPortalDataCFOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPCBNICPortalDataCFOCompleted(this, new InsertPCBNICPortalDataCFOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DigitalSiteplanUpload", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DigitalSiteplanUpload(string Siteplandocument) {
            object[] results = this.Invoke("DigitalSiteplanUpload", new object[] {
                        Siteplandocument});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DigitalSiteplanUploadAsync(string Siteplandocument) {
            this.DigitalSiteplanUploadAsync(Siteplandocument, null);
        }
        
        /// <remarks/>
        public void DigitalSiteplanUploadAsync(string Siteplandocument, object userState) {
            if ((this.DigitalSiteplanUploadOperationCompleted == null)) {
                this.DigitalSiteplanUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDigitalSiteplanUploadOperationCompleted);
            }
            this.InvokeAsync("DigitalSiteplanUpload", new object[] {
                        Siteplandocument}, this.DigitalSiteplanUploadOperationCompleted, userState);
        }
        
        private void OnDigitalSiteplanUploadOperationCompleted(object arg) {
            if ((this.DigitalSiteplanUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DigitalSiteplanUploadCompleted(this, new DigitalSiteplanUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRegistrationNumberAndCerificate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRegistrationNumberAndCerificate(string intQuessionairecfOid, string intCFOEnterpid, string intDeptid, string intApprovalid, string CertoficatePath, string RegistrationNumber) {
            object[] results = this.Invoke("GetRegistrationNumberAndCerificate", new object[] {
                        intQuessionairecfOid,
                        intCFOEnterpid,
                        intDeptid,
                        intApprovalid,
                        CertoficatePath,
                        RegistrationNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRegistrationNumberAndCerificateAsync(string intQuessionairecfOid, string intCFOEnterpid, string intDeptid, string intApprovalid, string CertoficatePath, string RegistrationNumber) {
            this.GetRegistrationNumberAndCerificateAsync(intQuessionairecfOid, intCFOEnterpid, intDeptid, intApprovalid, CertoficatePath, RegistrationNumber, null);
        }
        
        /// <remarks/>
        public void GetRegistrationNumberAndCerificateAsync(string intQuessionairecfOid, string intCFOEnterpid, string intDeptid, string intApprovalid, string CertoficatePath, string RegistrationNumber, object userState) {
            if ((this.GetRegistrationNumberAndCerificateOperationCompleted == null)) {
                this.GetRegistrationNumberAndCerificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRegistrationNumberAndCerificateOperationCompleted);
            }
            this.InvokeAsync("GetRegistrationNumberAndCerificate", new object[] {
                        intQuessionairecfOid,
                        intCFOEnterpid,
                        intDeptid,
                        intApprovalid,
                        CertoficatePath,
                        RegistrationNumber}, this.GetRegistrationNumberAndCerificateOperationCompleted, userState);
        }
        
        private void OnGetRegistrationNumberAndCerificateOperationCompleted(object arg) {
            if ((this.GetRegistrationNumberAndCerificateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRegistrationNumberAndCerificateCompleted(this, new GetRegistrationNumberAndCerificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DPMSPlanUpload", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DPMSPlanUpload(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            object[] results = this.Invoke("DPMSPlanUpload", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DPMSPlanUploadAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            this.DPMSPlanUploadAsync(intQuessionaireid, EnterprenuerId, intApprovalid, intDeptid, FileName, FilePath, Remarks, FileRefNo, Modified_by, null);
        }
        
        /// <remarks/>
        public void DPMSPlanUploadAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by, object userState) {
            if ((this.DPMSPlanUploadOperationCompleted == null)) {
                this.DPMSPlanUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDPMSPlanUploadOperationCompleted);
            }
            this.InvokeAsync("DPMSPlanUpload", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by}, this.DPMSPlanUploadOperationCompleted, userState);
        }
        
        private void OnDPMSPlanUploadOperationCompleted(object arg) {
            if ((this.DPMSPlanUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DPMSPlanUploadCompleted(this, new DPMSPlanUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertClarificationResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertClarificationResponse(string intQuessionaireid, string intDeptid, string intApprovalid, string QueryAttachmentFileName, string QueryAttachmentFilePath, string QueryRespondDate, string QueryRespondRemarks, string IPAddress, string categoryFlag, string lineofacitivtyid, string categoryid) {
            object[] results = this.Invoke("InsertClarificationResponse", new object[] {
                        intQuessionaireid,
                        intDeptid,
                        intApprovalid,
                        QueryAttachmentFileName,
                        QueryAttachmentFilePath,
                        QueryRespondDate,
                        QueryRespondRemarks,
                        IPAddress,
                        categoryFlag,
                        lineofacitivtyid,
                        categoryid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertClarificationResponseAsync(string intQuessionaireid, string intDeptid, string intApprovalid, string QueryAttachmentFileName, string QueryAttachmentFilePath, string QueryRespondDate, string QueryRespondRemarks, string IPAddress, string categoryFlag, string lineofacitivtyid, string categoryid) {
            this.InsertClarificationResponseAsync(intQuessionaireid, intDeptid, intApprovalid, QueryAttachmentFileName, QueryAttachmentFilePath, QueryRespondDate, QueryRespondRemarks, IPAddress, categoryFlag, lineofacitivtyid, categoryid, null);
        }
        
        /// <remarks/>
        public void InsertClarificationResponseAsync(string intQuessionaireid, string intDeptid, string intApprovalid, string QueryAttachmentFileName, string QueryAttachmentFilePath, string QueryRespondDate, string QueryRespondRemarks, string IPAddress, string categoryFlag, string lineofacitivtyid, string categoryid, object userState) {
            if ((this.InsertClarificationResponseOperationCompleted == null)) {
                this.InsertClarificationResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertClarificationResponseOperationCompleted);
            }
            this.InvokeAsync("InsertClarificationResponse", new object[] {
                        intQuessionaireid,
                        intDeptid,
                        intApprovalid,
                        QueryAttachmentFileName,
                        QueryAttachmentFilePath,
                        QueryRespondDate,
                        QueryRespondRemarks,
                        IPAddress,
                        categoryFlag,
                        lineofacitivtyid,
                        categoryid}, this.InsertClarificationResponseOperationCompleted, userState);
        }
        
        private void OnInsertClarificationResponseOperationCompleted(object arg) {
            if ((this.InsertClarificationResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertClarificationResponseCompleted(this, new InsertClarificationResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertClarificationResponseCFO", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertClarificationResponseCFO(string intQuessionaireid, string intDeptid, string intApprovalid, string QueryAttachmentFileName, string QueryAttachmentFilePath, string QueryRespondDate, string QueryRespondRemarks, string IPAddress, string categoryFlag, string lineofacitivtyid, string categoryid) {
            object[] results = this.Invoke("InsertClarificationResponseCFO", new object[] {
                        intQuessionaireid,
                        intDeptid,
                        intApprovalid,
                        QueryAttachmentFileName,
                        QueryAttachmentFilePath,
                        QueryRespondDate,
                        QueryRespondRemarks,
                        IPAddress,
                        categoryFlag,
                        lineofacitivtyid,
                        categoryid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertClarificationResponseCFOAsync(string intQuessionaireid, string intDeptid, string intApprovalid, string QueryAttachmentFileName, string QueryAttachmentFilePath, string QueryRespondDate, string QueryRespondRemarks, string IPAddress, string categoryFlag, string lineofacitivtyid, string categoryid) {
            this.InsertClarificationResponseCFOAsync(intQuessionaireid, intDeptid, intApprovalid, QueryAttachmentFileName, QueryAttachmentFilePath, QueryRespondDate, QueryRespondRemarks, IPAddress, categoryFlag, lineofacitivtyid, categoryid, null);
        }
        
        /// <remarks/>
        public void InsertClarificationResponseCFOAsync(string intQuessionaireid, string intDeptid, string intApprovalid, string QueryAttachmentFileName, string QueryAttachmentFilePath, string QueryRespondDate, string QueryRespondRemarks, string IPAddress, string categoryFlag, string lineofacitivtyid, string categoryid, object userState) {
            if ((this.InsertClarificationResponseCFOOperationCompleted == null)) {
                this.InsertClarificationResponseCFOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertClarificationResponseCFOOperationCompleted);
            }
            this.InvokeAsync("InsertClarificationResponseCFO", new object[] {
                        intQuessionaireid,
                        intDeptid,
                        intApprovalid,
                        QueryAttachmentFileName,
                        QueryAttachmentFilePath,
                        QueryRespondDate,
                        QueryRespondRemarks,
                        IPAddress,
                        categoryFlag,
                        lineofacitivtyid,
                        categoryid}, this.InsertClarificationResponseCFOOperationCompleted, userState);
        }
        
        private void OnInsertClarificationResponseCFOOperationCompleted(object arg) {
            if ((this.InsertClarificationResponseCFOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertClarificationResponseCFOCompleted(this, new InsertClarificationResponseCFOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPCBNICPortalDataREN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertPCBNICPortalDataREN(string intCFEEnterpid, string intQuessionaireid, string ApplicationSubmitted, string ApplicationSubmissionDate, string PaymentStatus, string TransactionNo, string PaymentDate, string BankName, string TotalAmount, string Downloadlink, string NICApplicationno, string AppealFlag) {
            object[] results = this.Invoke("InsertPCBNICPortalDataREN", new object[] {
                        intCFEEnterpid,
                        intQuessionaireid,
                        ApplicationSubmitted,
                        ApplicationSubmissionDate,
                        PaymentStatus,
                        TransactionNo,
                        PaymentDate,
                        BankName,
                        TotalAmount,
                        Downloadlink,
                        NICApplicationno,
                        AppealFlag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertPCBNICPortalDataRENAsync(string intCFEEnterpid, string intQuessionaireid, string ApplicationSubmitted, string ApplicationSubmissionDate, string PaymentStatus, string TransactionNo, string PaymentDate, string BankName, string TotalAmount, string Downloadlink, string NICApplicationno, string AppealFlag) {
            this.InsertPCBNICPortalDataRENAsync(intCFEEnterpid, intQuessionaireid, ApplicationSubmitted, ApplicationSubmissionDate, PaymentStatus, TransactionNo, PaymentDate, BankName, TotalAmount, Downloadlink, NICApplicationno, AppealFlag, null);
        }
        
        /// <remarks/>
        public void InsertPCBNICPortalDataRENAsync(string intCFEEnterpid, string intQuessionaireid, string ApplicationSubmitted, string ApplicationSubmissionDate, string PaymentStatus, string TransactionNo, string PaymentDate, string BankName, string TotalAmount, string Downloadlink, string NICApplicationno, string AppealFlag, object userState) {
            if ((this.InsertPCBNICPortalDataRENOperationCompleted == null)) {
                this.InsertPCBNICPortalDataRENOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPCBNICPortalDataRENOperationCompleted);
            }
            this.InvokeAsync("InsertPCBNICPortalDataREN", new object[] {
                        intCFEEnterpid,
                        intQuessionaireid,
                        ApplicationSubmitted,
                        ApplicationSubmissionDate,
                        PaymentStatus,
                        TransactionNo,
                        PaymentDate,
                        BankName,
                        TotalAmount,
                        Downloadlink,
                        NICApplicationno,
                        AppealFlag}, this.InsertPCBNICPortalDataRENOperationCompleted, userState);
        }
        
        private void OnInsertPCBNICPortalDataRENOperationCompleted(object arg) {
            if ((this.InsertPCBNICPortalDataRENCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPCBNICPortalDataRENCompleted(this, new InsertPCBNICPortalDataRENCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentApprovalProcessREN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentApprovalProcessREN(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip) {
            object[] results = this.Invoke("DepartmentApprovalProcessREN", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        UID,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Querytype,
                        Query_Raised_Text,
                        AdditionalAmount,
                        additionaldocs,
                        Trans_Date,
                        Created_by,
                        Sysip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessRENAsync(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip) {
            this.DepartmentApprovalProcessRENAsync(intQuessionaireid, intCFEEnterpid, UID, intDeptid, intApprovalid, intStageid, Querytype, Query_Raised_Text, AdditionalAmount, additionaldocs, Trans_Date, Created_by, Sysip, null);
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessRENAsync(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip, object userState) {
            if ((this.DepartmentApprovalProcessRENOperationCompleted == null)) {
                this.DepartmentApprovalProcessRENOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentApprovalProcessRENOperationCompleted);
            }
            this.InvokeAsync("DepartmentApprovalProcessREN", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        UID,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Querytype,
                        Query_Raised_Text,
                        AdditionalAmount,
                        additionaldocs,
                        Trans_Date,
                        Created_by,
                        Sysip}, this.DepartmentApprovalProcessRENOperationCompleted, userState);
        }
        
        private void OnDepartmentApprovalProcessRENOperationCompleted(object arg) {
            if ((this.DepartmentApprovalProcessRENCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentApprovalProcessRENCompleted(this, new DepartmentApprovalProcessRENCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentApprovalProcessAndCertificateUploadREN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentApprovalProcessAndCertificateUploadREN(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            object[] results = this.Invoke("DepartmentApprovalProcessAndCertificateUploadREN", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadRENAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            this.DepartmentApprovalProcessAndCertificateUploadRENAsync(intQuessionaireid, EnterprenuerId, intApprovalid, intDeptid, intStageid, FileName, FilePath, Remarks, FileRefNo, Modified_by, null);
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadRENAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by, object userState) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadRENOperationCompleted == null)) {
                this.DepartmentApprovalProcessAndCertificateUploadRENOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentApprovalProcessAndCertificateUploadRENOperationCompleted);
            }
            this.InvokeAsync("DepartmentApprovalProcessAndCertificateUploadREN", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by}, this.DepartmentApprovalProcessAndCertificateUploadRENOperationCompleted, userState);
        }
        
        private void OnDepartmentApprovalProcessAndCertificateUploadRENOperationCompleted(object arg) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadRENCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentApprovalProcessAndCertificateUploadRENCompleted(this, new DepartmentApprovalProcessAndCertificateUploadRENCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertClarificationResponseRen", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertClarificationResponseRen(string intQuessionaireid, string intcfeid, string intDeptid, string intApprovalid, string QueryAttachmentFileName, string QueryAttachmentFilePath, string QueryRespondDate, string QueryRespondRemarks, string IPAddress, string categoryFlag, string lineofacitivtyid, string categoryid) {
            object[] results = this.Invoke("InsertClarificationResponseRen", new object[] {
                        intQuessionaireid,
                        intcfeid,
                        intDeptid,
                        intApprovalid,
                        QueryAttachmentFileName,
                        QueryAttachmentFilePath,
                        QueryRespondDate,
                        QueryRespondRemarks,
                        IPAddress,
                        categoryFlag,
                        lineofacitivtyid,
                        categoryid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertClarificationResponseRenAsync(string intQuessionaireid, string intcfeid, string intDeptid, string intApprovalid, string QueryAttachmentFileName, string QueryAttachmentFilePath, string QueryRespondDate, string QueryRespondRemarks, string IPAddress, string categoryFlag, string lineofacitivtyid, string categoryid) {
            this.InsertClarificationResponseRenAsync(intQuessionaireid, intcfeid, intDeptid, intApprovalid, QueryAttachmentFileName, QueryAttachmentFilePath, QueryRespondDate, QueryRespondRemarks, IPAddress, categoryFlag, lineofacitivtyid, categoryid, null);
        }
        
        /// <remarks/>
        public void InsertClarificationResponseRenAsync(string intQuessionaireid, string intcfeid, string intDeptid, string intApprovalid, string QueryAttachmentFileName, string QueryAttachmentFilePath, string QueryRespondDate, string QueryRespondRemarks, string IPAddress, string categoryFlag, string lineofacitivtyid, string categoryid, object userState) {
            if ((this.InsertClarificationResponseRenOperationCompleted == null)) {
                this.InsertClarificationResponseRenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertClarificationResponseRenOperationCompleted);
            }
            this.InvokeAsync("InsertClarificationResponseRen", new object[] {
                        intQuessionaireid,
                        intcfeid,
                        intDeptid,
                        intApprovalid,
                        QueryAttachmentFileName,
                        QueryAttachmentFilePath,
                        QueryRespondDate,
                        QueryRespondRemarks,
                        IPAddress,
                        categoryFlag,
                        lineofacitivtyid,
                        categoryid}, this.InsertClarificationResponseRenOperationCompleted, userState);
        }
        
        private void OnInsertClarificationResponseRenOperationCompleted(object arg) {
            if ((this.InsertClarificationResponseRenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertClarificationResponseRenCompleted(this, new InsertClarificationResponseRenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BoilerInspectionReportStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BoilerInspectionReportStatus(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Documentpath, string Sysip) {
            object[] results = this.Invoke("BoilerInspectionReportStatus", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Documentpath,
                        Sysip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BoilerInspectionReportStatusAsync(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Documentpath, string Sysip) {
            this.BoilerInspectionReportStatusAsync(intQuessionaireid, intCFEEnterpid, intDeptid, intApprovalid, intStageid, Documentpath, Sysip, null);
        }
        
        /// <remarks/>
        public void BoilerInspectionReportStatusAsync(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Documentpath, string Sysip, object userState) {
            if ((this.BoilerInspectionReportStatusOperationCompleted == null)) {
                this.BoilerInspectionReportStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBoilerInspectionReportStatusOperationCompleted);
            }
            this.InvokeAsync("BoilerInspectionReportStatus", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Documentpath,
                        Sysip}, this.BoilerInspectionReportStatusOperationCompleted, userState);
        }
        
        private void OnBoilerInspectionReportStatusOperationCompleted(object arg) {
            if ((this.BoilerInspectionReportStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BoilerInspectionReportStatusCompleted(this, new BoilerInspectionReportStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentPlotAllotmentProcess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentPlotAllotmentProcess(string intapplicationid, string UID, string intStageid, string Querytype, string Query_Raised_Text, string additionaldocs, string Trans_Date, string Created_by, string Sysip, string filename, string filepath, string filerefno) {
            object[] results = this.Invoke("DepartmentPlotAllotmentProcess", new object[] {
                        intapplicationid,
                        UID,
                        intStageid,
                        Querytype,
                        Query_Raised_Text,
                        additionaldocs,
                        Trans_Date,
                        Created_by,
                        Sysip,
                        filename,
                        filepath,
                        filerefno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentPlotAllotmentProcessAsync(string intapplicationid, string UID, string intStageid, string Querytype, string Query_Raised_Text, string additionaldocs, string Trans_Date, string Created_by, string Sysip, string filename, string filepath, string filerefno) {
            this.DepartmentPlotAllotmentProcessAsync(intapplicationid, UID, intStageid, Querytype, Query_Raised_Text, additionaldocs, Trans_Date, Created_by, Sysip, filename, filepath, filerefno, null);
        }
        
        /// <remarks/>
        public void DepartmentPlotAllotmentProcessAsync(string intapplicationid, string UID, string intStageid, string Querytype, string Query_Raised_Text, string additionaldocs, string Trans_Date, string Created_by, string Sysip, string filename, string filepath, string filerefno, object userState) {
            if ((this.DepartmentPlotAllotmentProcessOperationCompleted == null)) {
                this.DepartmentPlotAllotmentProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentPlotAllotmentProcessOperationCompleted);
            }
            this.InvokeAsync("DepartmentPlotAllotmentProcess", new object[] {
                        intapplicationid,
                        UID,
                        intStageid,
                        Querytype,
                        Query_Raised_Text,
                        additionaldocs,
                        Trans_Date,
                        Created_by,
                        Sysip,
                        filename,
                        filepath,
                        filerefno}, this.DepartmentPlotAllotmentProcessOperationCompleted, userState);
        }
        
        private void OnDepartmentPlotAllotmentProcessOperationCompleted(object arg) {
            if ((this.DepartmentPlotAllotmentProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentPlotAllotmentProcessCompleted(this, new DepartmentPlotAllotmentProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentApprovalProcessCFOLabour", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentApprovalProcessCFOLabour(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip) {
            object[] results = this.Invoke("DepartmentApprovalProcessCFOLabour", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        UID,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Querytype,
                        Query_Raised_Text,
                        AdditionalAmount,
                        additionaldocs,
                        Trans_Date,
                        Created_by,
                        Sysip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessCFOLabourAsync(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip) {
            this.DepartmentApprovalProcessCFOLabourAsync(intQuessionaireid, intCFEEnterpid, UID, intDeptid, intApprovalid, intStageid, Querytype, Query_Raised_Text, AdditionalAmount, additionaldocs, Trans_Date, Created_by, Sysip, null);
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessCFOLabourAsync(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip, object userState) {
            if ((this.DepartmentApprovalProcessCFOLabourOperationCompleted == null)) {
                this.DepartmentApprovalProcessCFOLabourOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentApprovalProcessCFOLabourOperationCompleted);
            }
            this.InvokeAsync("DepartmentApprovalProcessCFOLabour", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        UID,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Querytype,
                        Query_Raised_Text,
                        AdditionalAmount,
                        additionaldocs,
                        Trans_Date,
                        Created_by,
                        Sysip}, this.DepartmentApprovalProcessCFOLabourOperationCompleted, userState);
        }
        
        private void OnDepartmentApprovalProcessCFOLabourOperationCompleted(object arg) {
            if ((this.DepartmentApprovalProcessCFOLabourCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentApprovalProcessCFOLabourCompleted(this, new DepartmentApprovalProcessCFOLabourCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCFEEnterprenuerDetailsNew", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCFEEnterprenuerDetailsNew(string uidno, string Createdby) {
            object[] results = this.Invoke("GetCFEEnterprenuerDetailsNew", new object[] {
                        uidno,
                        Createdby});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCFEEnterprenuerDetailsNewAsync(string uidno, string Createdby) {
            this.GetCFEEnterprenuerDetailsNewAsync(uidno, Createdby, null);
        }
        
        /// <remarks/>
        public void GetCFEEnterprenuerDetailsNewAsync(string uidno, string Createdby, object userState) {
            if ((this.GetCFEEnterprenuerDetailsNewOperationCompleted == null)) {
                this.GetCFEEnterprenuerDetailsNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCFEEnterprenuerDetailsNewOperationCompleted);
            }
            this.InvokeAsync("GetCFEEnterprenuerDetailsNew", new object[] {
                        uidno,
                        Createdby}, this.GetCFEEnterprenuerDetailsNewOperationCompleted, userState);
        }
        
        private void OnGetCFEEnterprenuerDetailsNewOperationCompleted(object arg) {
            if ((this.GetCFEEnterprenuerDetailsNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCFEEnterprenuerDetailsNewCompleted(this, new GetCFEEnterprenuerDetailsNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetdataCFEApprovaldocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetdataCFEApprovaldocument(string uidno, string Createdby) {
            object[] results = this.Invoke("GetdataCFEApprovaldocument", new object[] {
                        uidno,
                        Createdby});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetdataCFEApprovaldocumentAsync(string uidno, string Createdby) {
            this.GetdataCFEApprovaldocumentAsync(uidno, Createdby, null);
        }
        
        /// <remarks/>
        public void GetdataCFEApprovaldocumentAsync(string uidno, string Createdby, object userState) {
            if ((this.GetdataCFEApprovaldocumentOperationCompleted == null)) {
                this.GetdataCFEApprovaldocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetdataCFEApprovaldocumentOperationCompleted);
            }
            this.InvokeAsync("GetdataCFEApprovaldocument", new object[] {
                        uidno,
                        Createdby}, this.GetdataCFEApprovaldocumentOperationCompleted, userState);
        }
        
        private void OnGetdataCFEApprovaldocumentOperationCompleted(object arg) {
            if ((this.GetdataCFEApprovaldocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetdataCFEApprovaldocumentCompleted(this, new GetdataCFEApprovaldocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BoilerInspectionStatusCFE", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BoilerInspectionStatusCFE(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Documentpath, string Sysip) {
            object[] results = this.Invoke("BoilerInspectionStatusCFE", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Documentpath,
                        Sysip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BoilerInspectionStatusCFEAsync(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Documentpath, string Sysip) {
            this.BoilerInspectionStatusCFEAsync(intQuessionaireid, intCFEEnterpid, intDeptid, intApprovalid, intStageid, Documentpath, Sysip, null);
        }
        
        /// <remarks/>
        public void BoilerInspectionStatusCFEAsync(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Documentpath, string Sysip, object userState) {
            if ((this.BoilerInspectionStatusCFEOperationCompleted == null)) {
                this.BoilerInspectionStatusCFEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBoilerInspectionStatusCFEOperationCompleted);
            }
            this.InvokeAsync("BoilerInspectionStatusCFE", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Documentpath,
                        Sysip}, this.BoilerInspectionStatusCFEOperationCompleted, userState);
        }
        
        private void OnBoilerInspectionStatusCFEOperationCompleted(object arg) {
            if ((this.BoilerInspectionStatusCFECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BoilerInspectionStatusCFECompleted(this, new BoilerInspectionStatusCFECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BoilerInspectionStatusREN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BoilerInspectionStatusREN(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Documentpath, string Sysip) {
            object[] results = this.Invoke("BoilerInspectionStatusREN", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Documentpath,
                        Sysip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BoilerInspectionStatusRENAsync(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Documentpath, string Sysip) {
            this.BoilerInspectionStatusRENAsync(intQuessionaireid, intCFEEnterpid, intDeptid, intApprovalid, intStageid, Documentpath, Sysip, null);
        }
        
        /// <remarks/>
        public void BoilerInspectionStatusRENAsync(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Documentpath, string Sysip, object userState) {
            if ((this.BoilerInspectionStatusRENOperationCompleted == null)) {
                this.BoilerInspectionStatusRENOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBoilerInspectionStatusRENOperationCompleted);
            }
            this.InvokeAsync("BoilerInspectionStatusREN", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Documentpath,
                        Sysip}, this.BoilerInspectionStatusRENOperationCompleted, userState);
        }
        
        private void OnBoilerInspectionStatusRENOperationCompleted(object arg) {
            if ((this.BoilerInspectionStatusRENCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BoilerInspectionStatusRENCompleted(this, new BoilerInspectionStatusRENCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertEXCISEPortalDataCFO", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertEXCISEPortalDataCFO(string approvalid, string intCFEEnterpid, string intQuessionaireid, string ApplicationSubmitted, string ApplicationSubmissionDate, string PaymentStatus, string TransactionNo, string PaymentDate, string BankName, string TotalAmount, string Downloadlink, string EXCISEApplicationno, string AppealFlag) {
            object[] results = this.Invoke("InsertEXCISEPortalDataCFO", new object[] {
                        approvalid,
                        intCFEEnterpid,
                        intQuessionaireid,
                        ApplicationSubmitted,
                        ApplicationSubmissionDate,
                        PaymentStatus,
                        TransactionNo,
                        PaymentDate,
                        BankName,
                        TotalAmount,
                        Downloadlink,
                        EXCISEApplicationno,
                        AppealFlag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertEXCISEPortalDataCFOAsync(string approvalid, string intCFEEnterpid, string intQuessionaireid, string ApplicationSubmitted, string ApplicationSubmissionDate, string PaymentStatus, string TransactionNo, string PaymentDate, string BankName, string TotalAmount, string Downloadlink, string EXCISEApplicationno, string AppealFlag) {
            this.InsertEXCISEPortalDataCFOAsync(approvalid, intCFEEnterpid, intQuessionaireid, ApplicationSubmitted, ApplicationSubmissionDate, PaymentStatus, TransactionNo, PaymentDate, BankName, TotalAmount, Downloadlink, EXCISEApplicationno, AppealFlag, null);
        }
        
        /// <remarks/>
        public void InsertEXCISEPortalDataCFOAsync(string approvalid, string intCFEEnterpid, string intQuessionaireid, string ApplicationSubmitted, string ApplicationSubmissionDate, string PaymentStatus, string TransactionNo, string PaymentDate, string BankName, string TotalAmount, string Downloadlink, string EXCISEApplicationno, string AppealFlag, object userState) {
            if ((this.InsertEXCISEPortalDataCFOOperationCompleted == null)) {
                this.InsertEXCISEPortalDataCFOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertEXCISEPortalDataCFOOperationCompleted);
            }
            this.InvokeAsync("InsertEXCISEPortalDataCFO", new object[] {
                        approvalid,
                        intCFEEnterpid,
                        intQuessionaireid,
                        ApplicationSubmitted,
                        ApplicationSubmissionDate,
                        PaymentStatus,
                        TransactionNo,
                        PaymentDate,
                        BankName,
                        TotalAmount,
                        Downloadlink,
                        EXCISEApplicationno,
                        AppealFlag}, this.InsertEXCISEPortalDataCFOOperationCompleted, userState);
        }
        
        private void OnInsertEXCISEPortalDataCFOOperationCompleted(object arg) {
            if ((this.InsertEXCISEPortalDataCFOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertEXCISEPortalDataCFOCompleted(this, new InsertEXCISEPortalDataCFOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentApprovalProcessTourismEvent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentApprovalProcessTourismEvent(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip) {
            object[] results = this.Invoke("DepartmentApprovalProcessTourismEvent", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        UID,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Querytype,
                        Query_Raised_Text,
                        AdditionalAmount,
                        additionaldocs,
                        Trans_Date,
                        Created_by,
                        Sysip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessTourismEventAsync(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip) {
            this.DepartmentApprovalProcessTourismEventAsync(intQuessionaireid, intCFEEnterpid, UID, intDeptid, intApprovalid, intStageid, Querytype, Query_Raised_Text, AdditionalAmount, additionaldocs, Trans_Date, Created_by, Sysip, null);
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessTourismEventAsync(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip, object userState) {
            if ((this.DepartmentApprovalProcessTourismEventOperationCompleted == null)) {
                this.DepartmentApprovalProcessTourismEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentApprovalProcessTourismEventOperationCompleted);
            }
            this.InvokeAsync("DepartmentApprovalProcessTourismEvent", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        UID,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Querytype,
                        Query_Raised_Text,
                        AdditionalAmount,
                        additionaldocs,
                        Trans_Date,
                        Created_by,
                        Sysip}, this.DepartmentApprovalProcessTourismEventOperationCompleted, userState);
        }
        
        private void OnDepartmentApprovalProcessTourismEventOperationCompleted(object arg) {
            if ((this.DepartmentApprovalProcessTourismEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentApprovalProcessTourismEventCompleted(this, new DepartmentApprovalProcessTourismEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentApprovalProcessAndCertificateUploadTourismEvent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentApprovalProcessAndCertificateUploadTourismEvent(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            object[] results = this.Invoke("DepartmentApprovalProcessAndCertificateUploadTourismEvent", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadTourismEventAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            this.DepartmentApprovalProcessAndCertificateUploadTourismEventAsync(intQuessionaireid, EnterprenuerId, intApprovalid, intDeptid, intStageid, FileName, FilePath, Remarks, FileRefNo, Modified_by, null);
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadTourismEventAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by, object userState) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadTourismEventOperationCompleted == null)) {
                this.DepartmentApprovalProcessAndCertificateUploadTourismEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentApprovalProcessAndCertificateUploadTourismEventOperationCompleted);
            }
            this.InvokeAsync("DepartmentApprovalProcessAndCertificateUploadTourismEvent", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by}, this.DepartmentApprovalProcessAndCertificateUploadTourismEventOperationCompleted, userState);
        }
        
        private void OnDepartmentApprovalProcessAndCertificateUploadTourismEventOperationCompleted(object arg) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadTourismEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentApprovalProcessAndCertificateUploadTourismEventCompleted(this, new DepartmentApprovalProcessAndCertificateUploadTourismEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentPlotAllotmentProcessSubdivision", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentPlotAllotmentProcessSubdivision(string intapplicationid, string UID, string intStageid, string plotno, string pltoarea, string remarks, string Created_by, string Sysip) {
            object[] results = this.Invoke("DepartmentPlotAllotmentProcessSubdivision", new object[] {
                        intapplicationid,
                        UID,
                        intStageid,
                        plotno,
                        pltoarea,
                        remarks,
                        Created_by,
                        Sysip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentPlotAllotmentProcessSubdivisionAsync(string intapplicationid, string UID, string intStageid, string plotno, string pltoarea, string remarks, string Created_by, string Sysip) {
            this.DepartmentPlotAllotmentProcessSubdivisionAsync(intapplicationid, UID, intStageid, plotno, pltoarea, remarks, Created_by, Sysip, null);
        }
        
        /// <remarks/>
        public void DepartmentPlotAllotmentProcessSubdivisionAsync(string intapplicationid, string UID, string intStageid, string plotno, string pltoarea, string remarks, string Created_by, string Sysip, object userState) {
            if ((this.DepartmentPlotAllotmentProcessSubdivisionOperationCompleted == null)) {
                this.DepartmentPlotAllotmentProcessSubdivisionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentPlotAllotmentProcessSubdivisionOperationCompleted);
            }
            this.InvokeAsync("DepartmentPlotAllotmentProcessSubdivision", new object[] {
                        intapplicationid,
                        UID,
                        intStageid,
                        plotno,
                        pltoarea,
                        remarks,
                        Created_by,
                        Sysip}, this.DepartmentPlotAllotmentProcessSubdivisionOperationCompleted, userState);
        }
        
        private void OnDepartmentPlotAllotmentProcessSubdivisionOperationCompleted(object arg) {
            if ((this.DepartmentPlotAllotmentProcessSubdivisionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentPlotAllotmentProcessSubdivisionCompleted(this, new DepartmentPlotAllotmentProcessSubdivisionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRenewalQuestionnaireidpcb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRenewalQuestionnaireidpcb(string nicapplno) {
            object[] results = this.Invoke("GetRenewalQuestionnaireidpcb", new object[] {
                        nicapplno});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRenewalQuestionnaireidpcbAsync(string nicapplno) {
            this.GetRenewalQuestionnaireidpcbAsync(nicapplno, null);
        }
        
        /// <remarks/>
        public void GetRenewalQuestionnaireidpcbAsync(string nicapplno, object userState) {
            if ((this.GetRenewalQuestionnaireidpcbOperationCompleted == null)) {
                this.GetRenewalQuestionnaireidpcbOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRenewalQuestionnaireidpcbOperationCompleted);
            }
            this.InvokeAsync("GetRenewalQuestionnaireidpcb", new object[] {
                        nicapplno}, this.GetRenewalQuestionnaireidpcbOperationCompleted, userState);
        }
        
        private void OnGetRenewalQuestionnaireidpcbOperationCompleted(object arg) {
            if ((this.GetRenewalQuestionnaireidpcbCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRenewalQuestionnaireidpcbCompleted(this, new GetRenewalQuestionnaireidpcbCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertPCBNICPortalDataBMW", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertPCBNICPortalDataBMW(string intCFEEnterpid, string intQuessionaireid, string ApplicationSubmitted, string ApplicationSubmissionDate, string PaymentStatus, string TransactionNo, string PaymentDate, string BankName, string TotalAmount, string Downloadlink, string NICApplicationno, string AppealFlag) {
            object[] results = this.Invoke("InsertPCBNICPortalDataBMW", new object[] {
                        intCFEEnterpid,
                        intQuessionaireid,
                        ApplicationSubmitted,
                        ApplicationSubmissionDate,
                        PaymentStatus,
                        TransactionNo,
                        PaymentDate,
                        BankName,
                        TotalAmount,
                        Downloadlink,
                        NICApplicationno,
                        AppealFlag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertPCBNICPortalDataBMWAsync(string intCFEEnterpid, string intQuessionaireid, string ApplicationSubmitted, string ApplicationSubmissionDate, string PaymentStatus, string TransactionNo, string PaymentDate, string BankName, string TotalAmount, string Downloadlink, string NICApplicationno, string AppealFlag) {
            this.InsertPCBNICPortalDataBMWAsync(intCFEEnterpid, intQuessionaireid, ApplicationSubmitted, ApplicationSubmissionDate, PaymentStatus, TransactionNo, PaymentDate, BankName, TotalAmount, Downloadlink, NICApplicationno, AppealFlag, null);
        }
        
        /// <remarks/>
        public void InsertPCBNICPortalDataBMWAsync(string intCFEEnterpid, string intQuessionaireid, string ApplicationSubmitted, string ApplicationSubmissionDate, string PaymentStatus, string TransactionNo, string PaymentDate, string BankName, string TotalAmount, string Downloadlink, string NICApplicationno, string AppealFlag, object userState) {
            if ((this.InsertPCBNICPortalDataBMWOperationCompleted == null)) {
                this.InsertPCBNICPortalDataBMWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPCBNICPortalDataBMWOperationCompleted);
            }
            this.InvokeAsync("InsertPCBNICPortalDataBMW", new object[] {
                        intCFEEnterpid,
                        intQuessionaireid,
                        ApplicationSubmitted,
                        ApplicationSubmissionDate,
                        PaymentStatus,
                        TransactionNo,
                        PaymentDate,
                        BankName,
                        TotalAmount,
                        Downloadlink,
                        NICApplicationno,
                        AppealFlag}, this.InsertPCBNICPortalDataBMWOperationCompleted, userState);
        }
        
        private void OnInsertPCBNICPortalDataBMWOperationCompleted(object arg) {
            if ((this.InsertPCBNICPortalDataBMWCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPCBNICPortalDataBMWCompleted(this, new InsertPCBNICPortalDataBMWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentApprovalProcessBMW", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentApprovalProcessBMW(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip) {
            object[] results = this.Invoke("DepartmentApprovalProcessBMW", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        UID,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Querytype,
                        Query_Raised_Text,
                        AdditionalAmount,
                        additionaldocs,
                        Trans_Date,
                        Created_by,
                        Sysip});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessBMWAsync(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip) {
            this.DepartmentApprovalProcessBMWAsync(intQuessionaireid, intCFEEnterpid, UID, intDeptid, intApprovalid, intStageid, Querytype, Query_Raised_Text, AdditionalAmount, additionaldocs, Trans_Date, Created_by, Sysip, null);
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessBMWAsync(string intQuessionaireid, string intCFEEnterpid, string UID, string intDeptid, string intApprovalid, string intStageid, string Querytype, string Query_Raised_Text, string AdditionalAmount, string additionaldocs, string Trans_Date, string Created_by, string Sysip, object userState) {
            if ((this.DepartmentApprovalProcessBMWOperationCompleted == null)) {
                this.DepartmentApprovalProcessBMWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentApprovalProcessBMWOperationCompleted);
            }
            this.InvokeAsync("DepartmentApprovalProcessBMW", new object[] {
                        intQuessionaireid,
                        intCFEEnterpid,
                        UID,
                        intDeptid,
                        intApprovalid,
                        intStageid,
                        Querytype,
                        Query_Raised_Text,
                        AdditionalAmount,
                        additionaldocs,
                        Trans_Date,
                        Created_by,
                        Sysip}, this.DepartmentApprovalProcessBMWOperationCompleted, userState);
        }
        
        private void OnDepartmentApprovalProcessBMWOperationCompleted(object arg) {
            if ((this.DepartmentApprovalProcessBMWCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentApprovalProcessBMWCompleted(this, new DepartmentApprovalProcessBMWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DepartmentApprovalProcessAndCertificateUploadBMW", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DepartmentApprovalProcessAndCertificateUploadBMW(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            object[] results = this.Invoke("DepartmentApprovalProcessAndCertificateUploadBMW", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadBMWAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by) {
            this.DepartmentApprovalProcessAndCertificateUploadBMWAsync(intQuessionaireid, EnterprenuerId, intApprovalid, intDeptid, intStageid, FileName, FilePath, Remarks, FileRefNo, Modified_by, null);
        }
        
        /// <remarks/>
        public void DepartmentApprovalProcessAndCertificateUploadBMWAsync(string intQuessionaireid, string EnterprenuerId, string intApprovalid, string intDeptid, string intStageid, string FileName, string FilePath, string Remarks, string FileRefNo, string Modified_by, object userState) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadBMWOperationCompleted == null)) {
                this.DepartmentApprovalProcessAndCertificateUploadBMWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDepartmentApprovalProcessAndCertificateUploadBMWOperationCompleted);
            }
            this.InvokeAsync("DepartmentApprovalProcessAndCertificateUploadBMW", new object[] {
                        intQuessionaireid,
                        EnterprenuerId,
                        intApprovalid,
                        intDeptid,
                        intStageid,
                        FileName,
                        FilePath,
                        Remarks,
                        FileRefNo,
                        Modified_by}, this.DepartmentApprovalProcessAndCertificateUploadBMWOperationCompleted, userState);
        }
        
        private void OnDepartmentApprovalProcessAndCertificateUploadBMWOperationCompleted(object arg) {
            if ((this.DepartmentApprovalProcessAndCertificateUploadBMWCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DepartmentApprovalProcessAndCertificateUploadBMWCompleted(this, new DepartmentApprovalProcessAndCertificateUploadBMWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertClarificationResponseBMW", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertClarificationResponseBMW(string intQuessionaireid, string intcfeid, string intDeptid, string intApprovalid, string QueryAttachmentFileName, string QueryAttachmentFilePath, string QueryRespondDate, string QueryRespondRemarks, string IPAddress, string categoryFlag, string lineofacitivtyid, string categoryid) {
            object[] results = this.Invoke("InsertClarificationResponseBMW", new object[] {
                        intQuessionaireid,
                        intcfeid,
                        intDeptid,
                        intApprovalid,
                        QueryAttachmentFileName,
                        QueryAttachmentFilePath,
                        QueryRespondDate,
                        QueryRespondRemarks,
                        IPAddress,
                        categoryFlag,
                        lineofacitivtyid,
                        categoryid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertClarificationResponseBMWAsync(string intQuessionaireid, string intcfeid, string intDeptid, string intApprovalid, string QueryAttachmentFileName, string QueryAttachmentFilePath, string QueryRespondDate, string QueryRespondRemarks, string IPAddress, string categoryFlag, string lineofacitivtyid, string categoryid) {
            this.InsertClarificationResponseBMWAsync(intQuessionaireid, intcfeid, intDeptid, intApprovalid, QueryAttachmentFileName, QueryAttachmentFilePath, QueryRespondDate, QueryRespondRemarks, IPAddress, categoryFlag, lineofacitivtyid, categoryid, null);
        }
        
        /// <remarks/>
        public void InsertClarificationResponseBMWAsync(string intQuessionaireid, string intcfeid, string intDeptid, string intApprovalid, string QueryAttachmentFileName, string QueryAttachmentFilePath, string QueryRespondDate, string QueryRespondRemarks, string IPAddress, string categoryFlag, string lineofacitivtyid, string categoryid, object userState) {
            if ((this.InsertClarificationResponseBMWOperationCompleted == null)) {
                this.InsertClarificationResponseBMWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertClarificationResponseBMWOperationCompleted);
            }
            this.InvokeAsync("InsertClarificationResponseBMW", new object[] {
                        intQuessionaireid,
                        intcfeid,
                        intDeptid,
                        intApprovalid,
                        QueryAttachmentFileName,
                        QueryAttachmentFilePath,
                        QueryRespondDate,
                        QueryRespondRemarks,
                        IPAddress,
                        categoryFlag,
                        lineofacitivtyid,
                        categoryid}, this.InsertClarificationResponseBMWOperationCompleted, userState);
        }
        
        private void OnInsertClarificationResponseBMWOperationCompleted(object arg) {
            if ((this.InsertClarificationResponseBMWCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertClarificationResponseBMWCompleted(this, new InsertClarificationResponseBMWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateRedirectionstatusLegalVerfication", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateRedirectionstatusLegalVerfication(string LGVID, string LegalApplID, string LegalDownloadLink, string Legalmetrologystatus) {
            object[] results = this.Invoke("UpdateRedirectionstatusLegalVerfication", new object[] {
                        LGVID,
                        LegalApplID,
                        LegalDownloadLink,
                        Legalmetrologystatus});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateRedirectionstatusLegalVerficationAsync(string LGVID, string LegalApplID, string LegalDownloadLink, string Legalmetrologystatus) {
            this.UpdateRedirectionstatusLegalVerficationAsync(LGVID, LegalApplID, LegalDownloadLink, Legalmetrologystatus, null);
        }
        
        /// <remarks/>
        public void UpdateRedirectionstatusLegalVerficationAsync(string LGVID, string LegalApplID, string LegalDownloadLink, string Legalmetrologystatus, object userState) {
            if ((this.UpdateRedirectionstatusLegalVerficationOperationCompleted == null)) {
                this.UpdateRedirectionstatusLegalVerficationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRedirectionstatusLegalVerficationOperationCompleted);
            }
            this.InvokeAsync("UpdateRedirectionstatusLegalVerfication", new object[] {
                        LGVID,
                        LegalApplID,
                        LegalDownloadLink,
                        Legalmetrologystatus}, this.UpdateRedirectionstatusLegalVerficationOperationCompleted, userState);
        }
        
        private void OnUpdateRedirectionstatusLegalVerficationOperationCompleted(object arg) {
            if ((this.UpdateRedirectionstatusLegalVerficationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRedirectionstatusLegalVerficationCompleted(this, new UpdateRedirectionstatusLegalVerficationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdatelegalStatusCompletedEventHandler(object sender, UpdatelegalStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatelegalStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatelegalStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetTSIPASSdataonUIDnumberCompletedEventHandler(object sender, GetTSIPASSdataonUIDnumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTSIPASSdataonUIDnumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTSIPASSdataonUIDnumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetTSIPASSTrackeronUIDnumberCompletedEventHandler(object sender, GetTSIPASSTrackeronUIDnumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTSIPASSTrackeronUIDnumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTSIPASSTrackeronUIDnumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertPCBNICPortalDataCompletedEventHandler(object sender, InsertPCBNICPortalDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPCBNICPortalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPCBNICPortalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentApprovalProcessCompletedEventHandler(object sender, DepartmentApprovalProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentApprovalProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentApprovalProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentApprovalProcessAndCertificateUploadCompletedEventHandler(object sender, DepartmentApprovalProcessAndCertificateUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentApprovalProcessAndCertificateUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentApprovalProcessAndCertificateUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentApprovalProcessAndCertificateUploadContractLabourCompletedEventHandler(object sender, DepartmentApprovalProcessAndCertificateUploadContractLabourCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentApprovalProcessAndCertificateUploadContractLabourCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentApprovalProcessAndCertificateUploadContractLabourCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCompletedEventHandler(object sender, DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentApprovalProcessCFOCompletedEventHandler(object sender, DepartmentApprovalProcessCFOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentApprovalProcessCFOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentApprovalProcessCFOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentApprovalProcessAndCertificateUploadCFOCompletedEventHandler(object sender, DepartmentApprovalProcessAndCertificateUploadCFOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentApprovalProcessAndCertificateUploadCFOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentApprovalProcessAndCertificateUploadCFOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentApprovalProcessAndCertificateUploadContractLabourCFOCompletedEventHandler(object sender, DepartmentApprovalProcessAndCertificateUploadContractLabourCFOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentApprovalProcessAndCertificateUploadContractLabourCFOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentApprovalProcessAndCertificateUploadContractLabourCFOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOCompletedEventHandler(object sender, DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentApprovalProcessAndCertificateUploadPrincipalEmployerCFOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentErectorCertificateUploadCFOCompletedEventHandler(object sender, DepartmentErectorCertificateUploadCFOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentErectorCertificateUploadCFOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentErectorCertificateUploadCFOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void HMDAAdditionalPaymentDetailsCompletedEventHandler(object sender, HMDAAdditionalPaymentDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HMDAAdditionalPaymentDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HMDAAdditionalPaymentDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentApprovalProcessAndCertificateUploadContractLabourLicenseCompletedEventHandler(object sender, DepartmentApprovalProcessAndCertificateUploadContractLabourLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentApprovalProcessAndCertificateUploadContractLabourLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentApprovalProcessAndCertificateUploadContractLabourLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertPCBNICPortalDataCFOCompletedEventHandler(object sender, InsertPCBNICPortalDataCFOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPCBNICPortalDataCFOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPCBNICPortalDataCFOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DigitalSiteplanUploadCompletedEventHandler(object sender, DigitalSiteplanUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DigitalSiteplanUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DigitalSiteplanUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetRegistrationNumberAndCerificateCompletedEventHandler(object sender, GetRegistrationNumberAndCerificateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRegistrationNumberAndCerificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRegistrationNumberAndCerificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DPMSPlanUploadCompletedEventHandler(object sender, DPMSPlanUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DPMSPlanUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DPMSPlanUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertClarificationResponseCompletedEventHandler(object sender, InsertClarificationResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertClarificationResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertClarificationResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertClarificationResponseCFOCompletedEventHandler(object sender, InsertClarificationResponseCFOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertClarificationResponseCFOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertClarificationResponseCFOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertPCBNICPortalDataRENCompletedEventHandler(object sender, InsertPCBNICPortalDataRENCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPCBNICPortalDataRENCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPCBNICPortalDataRENCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentApprovalProcessRENCompletedEventHandler(object sender, DepartmentApprovalProcessRENCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentApprovalProcessRENCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentApprovalProcessRENCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentApprovalProcessAndCertificateUploadRENCompletedEventHandler(object sender, DepartmentApprovalProcessAndCertificateUploadRENCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentApprovalProcessAndCertificateUploadRENCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentApprovalProcessAndCertificateUploadRENCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertClarificationResponseRenCompletedEventHandler(object sender, InsertClarificationResponseRenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertClarificationResponseRenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertClarificationResponseRenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BoilerInspectionReportStatusCompletedEventHandler(object sender, BoilerInspectionReportStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BoilerInspectionReportStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BoilerInspectionReportStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentPlotAllotmentProcessCompletedEventHandler(object sender, DepartmentPlotAllotmentProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentPlotAllotmentProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentPlotAllotmentProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentApprovalProcessCFOLabourCompletedEventHandler(object sender, DepartmentApprovalProcessCFOLabourCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentApprovalProcessCFOLabourCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentApprovalProcessCFOLabourCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCFEEnterprenuerDetailsNewCompletedEventHandler(object sender, GetCFEEnterprenuerDetailsNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCFEEnterprenuerDetailsNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCFEEnterprenuerDetailsNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetdataCFEApprovaldocumentCompletedEventHandler(object sender, GetdataCFEApprovaldocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetdataCFEApprovaldocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetdataCFEApprovaldocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BoilerInspectionStatusCFECompletedEventHandler(object sender, BoilerInspectionStatusCFECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BoilerInspectionStatusCFECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BoilerInspectionStatusCFECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void BoilerInspectionStatusRENCompletedEventHandler(object sender, BoilerInspectionStatusRENCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BoilerInspectionStatusRENCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BoilerInspectionStatusRENCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertEXCISEPortalDataCFOCompletedEventHandler(object sender, InsertEXCISEPortalDataCFOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertEXCISEPortalDataCFOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertEXCISEPortalDataCFOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentApprovalProcessTourismEventCompletedEventHandler(object sender, DepartmentApprovalProcessTourismEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentApprovalProcessTourismEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentApprovalProcessTourismEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentApprovalProcessAndCertificateUploadTourismEventCompletedEventHandler(object sender, DepartmentApprovalProcessAndCertificateUploadTourismEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentApprovalProcessAndCertificateUploadTourismEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentApprovalProcessAndCertificateUploadTourismEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentPlotAllotmentProcessSubdivisionCompletedEventHandler(object sender, DepartmentPlotAllotmentProcessSubdivisionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentPlotAllotmentProcessSubdivisionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentPlotAllotmentProcessSubdivisionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetRenewalQuestionnaireidpcbCompletedEventHandler(object sender, GetRenewalQuestionnaireidpcbCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRenewalQuestionnaireidpcbCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRenewalQuestionnaireidpcbCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertPCBNICPortalDataBMWCompletedEventHandler(object sender, InsertPCBNICPortalDataBMWCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPCBNICPortalDataBMWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPCBNICPortalDataBMWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentApprovalProcessBMWCompletedEventHandler(object sender, DepartmentApprovalProcessBMWCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentApprovalProcessBMWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentApprovalProcessBMWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void DepartmentApprovalProcessAndCertificateUploadBMWCompletedEventHandler(object sender, DepartmentApprovalProcessAndCertificateUploadBMWCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DepartmentApprovalProcessAndCertificateUploadBMWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DepartmentApprovalProcessAndCertificateUploadBMWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertClarificationResponseBMWCompletedEventHandler(object sender, InsertClarificationResponseBMWCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertClarificationResponseBMWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertClarificationResponseBMWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateRedirectionstatusLegalVerficationCompletedEventHandler(object sender, UpdateRedirectionstatusLegalVerficationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateRedirectionstatusLegalVerficationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateRedirectionstatusLegalVerficationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591